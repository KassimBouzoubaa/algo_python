FONCTION dynamic(actions, budget_max):
    actions_dict = transformer les clés en entiers pour faciliter le traitement de actions
    actions_list = convertir actions_dict en une liste de tuples (id, cout, benefice)
    initialiser une matrice dp de taille (len(actions_list) + 1) * (budget_max + 1) remplie de 0

    POUR i DE 1 À len(actions_list) + 1 FAIRE:
        POUR budget DE 1 À budget_max + 1 FAIRE:
            SI actions_list[i - 1][1] <= budget ALORS:
                dp[i][budget] = maximum entre dp[i - 1][budget] et dp[i - 1][budget - actions_list[i - 1][1]] + actions_list[i - 1][2]
            SINON:
                dp[i][budget] = dp[i - 1][budget]

    initialiser une liste combinaison vide
    initialiser i à len(actions_list)
    initialiser budget à budget_max
    TANT QUE i > 0 ET budget > 0 FAIRE:
        SI dp[i][budget] != dp[i - 1][budget] ALORS:
            ajouter le nom de l'action à partir des clés du dictionnaire d'entrée à combinaison
            réduire budget de actions_list[i - 1][1]
        décrémenter i

    initialiser somme_benefices à la somme des bénéfices des actions dans combinaison
    initialiser somme_couts à la somme des coûts des actions dans combinaison

    RETOURNER combinaison, somme_benefices, somme_couts
